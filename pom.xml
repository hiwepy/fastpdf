<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.hiwepy</groupId>
	<artifactId>fastpdf-parent</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>fastpdf</name>
	<description>
		1、基于iText和Flying Saucer结合freemark生成PDF文档快速操作工具
		2、docx4j
		3、
	</description>
	<url>http://fastpdf.jeefw.com</url>

	<modules>
		<module>fastpdf-core</module>
		<module>fastpdf-icepdf</module>
		<module>fastpdf-pdfbox</module>
		<module>fastpdf-struts2</module>	
		<module>fastpdf-webmvc</module>	
		<module>fastpdf-xpdf</module>
		<module>fastpdf-docx4j</module>
		<module>fastpdf-itextpdf</module>
	</modules>
	
	<licenses>
        <license>
            <name>The Apache License 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>

	<!-- 组织信息  -->
  	<organization>
    	<name>Jeefw</name>
    	<url>www.jeefw.com</url>
  	</organization>
  
  	<!-- 开发者信息  -->
    <developers>
        <developer>
        	<id>001</id>
            <name>wandalong</name>
            <email>hnxyhcwdl1003@163.com</email>
        </developer>
    </developers> 
	
	<!-- 配置部署的远程仓库:让Maven知道当我要发布release版本或者snapshot版本是需要发布到哪个地址 --> 
	<distributionManagement>  
	    <repository>
	     	<id>nexus-releases</id>
	     	<name>Nexus Release Repository</name>
	     	<url>http://121.43.110.87:8081/nexus/content/repositories/releases/</url>
	     	<!-- <url>http://localhost:8082/nexus/content/repositories/releases/</url> -->
	   	</repository>
       	<snapshotRepository>  
            <id>nexus-snapshots</id>  
            <name>Nexus Snapshot Repository</name>  
            <url>http://121.43.110.87:8081/nexus/content/repositories/snapshots/</url>
            <!-- <url>http://localhost:8082/nexus/content/repositories/snapshots/</url> -->
            <!-- 表示是否为Snapshot版本分配一个包含时间戳的构建号 --> 
            <uniqueVersion>true</uniqueVersion>  
        </snapshotRepository>  
    </distributionManagement>
    
    <build>
		<!-- 主资源目录 -->  
        <resources>  
            <resource>  
                <!-- 设定主资源目录  -->  
                <directory>src/main/resources</directory>
                  
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，只处理如下配置中包含的资源类型   
                <includes>  
                    <include>*.xml</include>  
                </includes>  
                 -->  
                   
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，不处理如下配置中包含的资源类型（剔除下如下配置中包含的资源类型）   
                <excludes>  
                    <exclude>*.xml</exclude>  
                </excludes>  
                -->  
                  
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，指定处理后的资源文件输出目录，默认是${build.outputDirectory}指定的目录  
                <targetPath>d:/</targetPath>  
                   -->  
                    
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，是否对主资源目录开启资源过滤 
                <filtering>true</filtering>  
                  -->  
            </resource>  
        </resources> 
		<filters>  
	        <!-- 过滤文件,通常是一个属性文件（名值对的形式） 
	        <filter>src/main/webapp/META-INF/auto-config.properties</filter>  -->  
	        <!-- 
	            <filter>${user.home}/antx.properties</filter> 
	        -->  
	    </filters> 
		<pluginManagement>
			<plugins>
				<!-- 编译插件：编译主代码至主输出目录 -->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version> 
					<!-- 设置源文件编码方式 -->  
					<configuration>
						<defaultLibBundleDir>lib</defaultLibBundleDir>
						<!-- 源代码编译版本 -->
						<source>1.7</source>
						<!-- 目标平台编译版本 -->
						<target>1.7</target>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
						<!--  -->
						<maxmem>512M</maxmem>
					</configuration>
				</plugin>
				<!-- 资源插件：复制主资源文件至主输出目录 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.7</version>
					<!-- 解决资源文件的编码问题 -->  
					<configuration>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
					<!-- 复制测试资源文件至测试输出目录复制resources到test-classess -->
					<executions>
						<execution>
							<id>copy-resources</id>
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/test-classes</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/resources</directory>
										<!--<filtering>true</filtering>
									--></resource>
								</resources>
							</configuration>
						</execution>
					</executions>
					<dependencies>
			            <dependency>
			                <groupId>org.apache.maven.shared</groupId>
			                <artifactId>maven-filtering</artifactId>
			                <version>1.3</version>
			            </dependency>
			         </dependencies>
				</plugin>
				<!-- 单元测试插件 ：执行测试用例-->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19.1</version>
					<configuration>
						<!-- 跳过单元测试 -->
						<skip>true</skip>
						<skipTests>true</skipTests>
						<!--
							forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。
							pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。
							once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
							always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。
						 -->
						<forkMode>once</forkMode>
						<argLine>-Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m</argLine>  
						<additionalClasspathElements>  
			                <additionalClasspathElement>  
			                    ${basedir}/target/test-classes  
			                </additionalClasspathElement>  
			            </additionalClasspathElements>  
			            <includes>  
			                <include>**/*Test.java</include> 
			            </includes> 
                        <excludes>
                            <exclude>**/TestBean.java</exclude>
                        </excludes>
					</configuration>					
				</plugin>
				<!-- jar包生成插件 ：创建项目jar包--> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-jar-plugin</artifactId>  
					<version>2.6</version>  
					<!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 -->  
					<configuration>  
	                    <archive>  
	                        <manifest>  
	                            <addClasspath>true</addClasspath>  
	                            <classpathPrefix>lib/</classpathPrefix>  
	                            <mainClass>.....Main</mainClass>  
	                        </manifest>  
	                    </archive>  
	                </configuration>  
				</plugin> 
				<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-install-plugin</artifactId>  
					<version>2.5.2</version>  
				</plugin> 
				<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-deploy-plugin</artifactId>  
		            <version>2.8.2</version>  
		        </plugin>
		        <!-- release插件: 自动进行工程版本升级 -->
	            <plugin>
	                <groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-release-plugin</artifactId>
	                <version>2.5.3</version>
	                <configuration>
	                    <!-- 设置分支跟里程碑的url -->
	                    <branchBase>svn://121.43.110.87/jeefw/jeefw-desktop/branches</branchBase>
	                    <tagBase>svn://121.43.110.87/jeefw/jeefw-desktop/tags</tagBase>
	                </configuration>
	            </plugin>	
		        <!-- 签名插件 ：自动完成GPG签名--> 
		        <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>1.6</version>
					<executions>
					    <execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
							     <goal>sign</goal>
							</goals>
					    </execution>
					</executions>
				</plugin>	
				<!-- 源码插件:发布时自动将源码同时发布 -->				
				<plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-source-plugin</artifactId>
					 <version>3.0.0</version> 
					 <!-- 打包source文件为jar文件 -->
					 <configuration>  
					 	 <testFailureIgnore>true</testFailureIgnore>
	                     <attach>true</attach>  
	                     <encoding>UTF-8</encoding>  
	                 </configuration> 
					 <executions>
						 <execution>
							 <id>attach-sources</id>
							 <phase>package</phase>
							 <goals>
								<goal>jar-no-fork</goal>
							 </goals>
						 </execution>
					 </executions>
				</plugin>
				<!-- 文档插件:发布时自动生成文档 -->	
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-javadoc-plugin</artifactId>  
		            <version>2.10.3</version> 
					<configuration>  
	                    <aggregate>true</aggregate>  
                       	<charset>UTF-8</charset> 
                        <encoding>UTF-8</encoding> 
                        <docencoding>UTF-8</docencoding> 
	                </configuration>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>				
		        </plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- 资源插件：复制主资源文件至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- 编译插件：编译主代码至主输出目录 -->  
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- 单元测试插件 ：执行测试用例 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin> 
			<!-- jar包生成插件 ：创建项目jar包 -->
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-jar-plugin</artifactId>  
			</plugin> 
			<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-install-plugin</artifactId>  
			</plugin> 
			<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
			<plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-deploy-plugin</artifactId>  
	        </plugin>	
			<!-- 源码插件:发布时自动将源码同时发布 -->				
			<plugin>
				 <groupId>org.apache.maven.plugins</groupId>
				 <artifactId>maven-source-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	
    <properties>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    	<antlr.version>3.4</antlr.version>
    	<alibaba-fastjson.version>1.2.15</alibaba-fastjson.version>
    	<batik.version>1.8</batik.version>
    	<commons-beanutils.version>1.9.3</commons-beanutils.version>
    	<commons-lang3.version>3.4</commons-lang3.version>
		<commons-logging.version>1.2</commons-logging.version>
		<commons-io.version>2.5</commons-io.version>
		<commons-imaging.version>1.0-R1534292</commons-imaging.version>
		<commons-pool2.version>2.4.2</commons-pool2.version>
    	<cssparser.version>0.9.18</cssparser.version>
    	<docx4j.version>3.3.2</docx4j.version>
    	<dom4j.version>1.6.1</dom4j.version>
 		<flying-saucer.version>9.0.8</flying-saucer.version>
		<flying-saucer-fix.version>9.0.8</flying-saucer-fix.version>
		<freemarker.version>2.3.23</freemarker.version>
		<gson.version>2.2.1</gson.version>
 		<jackson.version>2.6.4</jackson.version>
 		<jeekit.version>1.0.0-SNAPSHOT</jeekit.version>
 		<jdom.version>2.0.2</jdom.version>
 		<jsonlib.version>2.4</jsonlib.version>
		<json-simple.version>1.1.1</json-simple.version>
 		<jsoup.version>1.10.1</jsoup.version>
 		<junit.version>4.12</junit.version>
 		<htmlparser.version>1.4</htmlparser.version>
 		<itext.version>4.2.2</itext.version>
		<itext7.version>7.0.1</itext7.version>
		<itextpdf.version>5.5.10</itextpdf.version>
		<pdfbox.version>1.8.11</pdfbox.version><!--2.0.0-RC3 -->
		<phloc-commons.version>4.4.5</phloc-commons.version>
		<phloc-html.version>4.4.2</phloc-html.version>
		<phloc-css.version>3.8.0</phloc-css.version>
		<phloc-json.version>3.0.3</phloc-json.version>
 		<servlet-api.version>3.0.1</servlet-api.version>
 		<slf4j.version>1.7.22</slf4j.version>
 		<struts2.version>2.5.5</struts2.version>
		<struts2-annotations.version>1.0.6</struts2-annotations.version>
		<struts2-xwork.version>2.3.31</struts2-xwork.version>
 		<spring.version>4.3.5.RELEASE</spring.version><!-- 3.0.5.RELEASE，4.1.6.RELEASE，4.2.5.RELEASE， -->
 		<velocity.version>1.7</velocity.version>
		<velocity-tools.version>2.0</velocity-tools.version>
 		<xstream.version>1.4.8</xstream.version>
		<xml-apis.version>1.3.04</xml-apis.version>
 		<xmlworker-fix.version>5.5.8-RC1</xmlworker-fix.version>
	</properties>
	
	<dependencyManagement>
		<dependencies>
			
			<!-- ######################测试工具包###################### -->
			
			<!--junit : Junit测试是程序员测试，即白盒测试 -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			
			<!-- ######################Servlet相关基础包###################### -->
			
			<!-- servlet 基础依赖包 -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet-api.version}</version>
			</dependency>
			
			<!-- ######################日志组件工具包###################### -->
			
			<!-- SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样
			 的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<!--
				Jakarta Commons Logging (JCL) 提供的是一个日志 (Log) 接口 (interface)
				，同时兼顾轻量级和不依赖于具体的日志实现工具 。 它提供给中间件 /
				日志工具开发者一个简单的日志操作抽象，允许程序开发人员使用不同的具体日志实现工具。用户被假定已熟悉某种日志实现工具的更高级别的细节。
				JCL 提供的接口，对其它一些日志工具，包括 Log4J, Avalon LogKit, and JDK 1.4
				等，进行了简单的包装，此接口更接近于 Log4J 和 LogKit 的实现。
			-->
			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>${commons-logging.version}</version>
			</dependency>
			
			<!-- ######################基础常用工具包###################### -->
			
			<!-- 常用功能包括类型转换和动态bean的创建 -->
			<dependency>
				<groupId>commons-beanutils</groupId>
				<artifactId>commons-beanutils</artifactId>
				<version>${commons-beanutils.version}</version>
			</dependency>
			<!-- Commons项目中用来处理Java基本对象方法的工具类包， 可以简化很多平时经常要用到的写法， 例如判断字符串是否为空等等 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>
			<!-- Commons项目中用来处理IO的一些工具类包 -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			<!-- 
				Apache Commons Imaging 前身是 Apache Commons Sanselan ，这是一个用来读写各种图像格式的 Java 类库，
				包括快速解析图片的基本信息（大小、色彩空间、ICC配置等）和元数据。尽管慢点但非常好的可移植性。
				比起 ImageIO/JAI/Toolkit 更容易使用，支持更多的格式，提供简单访问元数据的方法。
			 -->
			<dependency>
			    <groupId>org.apache.commons</groupId>
			    <artifactId>commons-imaging</artifactId>
			    <version>${commons-imaging.version}</version>
			</dependency>
			<!--Commons-Pool 提供了通用对象池接口，一个用于创建模块化对象池的工具包，以及通常的对象池实现-->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-pool2</artifactId>
				<version>${commons-pool2.version}</version>
			</dependency>
			
			<!-- ######################org.apache.xmlgraphics ###################### -->
			
			<!-- Batik是使用svg格式图片来实现各种功能的应用程序以及Applet提供的一个基于java的工具包。 -->
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-transcoder</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-util</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-ext</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-awt-util</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-svggen</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-dom</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-svg-dom</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-css</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-bridge</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-gvt</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-xml</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-codec</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-parser</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-anim</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-script</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-rasterizer</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-swing</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-gui-util</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-js</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-extension</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-ttf2svg</artifactId>
				<version>${batik.version}</version>
			</dependency>
			
			<!-- ###################### 词法分析、HTML、CSS 解析工具包###################### -->
			
			<!-- 
			ANTLR(ANother Tool for Language Recognition)它是Java开发的词法分析工具，它可以接受词文法语言描述,
			并能产生识别这些语言的语句的程序。作为翻译程序的一部分,你可以使用简单的操 作符和动作来参数化你的文法，
			使之告诉ANTLR怎样去创建抽象语法树(AST)和怎样产生输出。ANTLR知道怎样去生成识别程序，语言包括 Java，C++，C#.
			Hibernate就是采用ANTLR来编译HQL查询语言的。
			 -->
			<dependency>
				<groupId>org.antlr</groupId>
				<artifactId>antlr</artifactId>
				<version>${antlr.version}</version>
			</dependency>
			<!--
				jsoup 是一款Java的HTML解析器，可直接解析某个URL地址、HTML文本内容。
				它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。
			-->
			<dependency>
				<groupId>org.jsoup</groupId>
				<artifactId>jsoup</artifactId>
				<version>${jsoup.version}</version>
			</dependency>
			<!-- css 解析工具包 -->
			<dependency>
				<groupId>net.sourceforge.cssparser</groupId>
				<artifactId>cssparser</artifactId>
				<version>${cssparser.version}</version>
			</dependency>
			<dependency>
				<groupId>nu.validator.htmlparser</groupId>
				<artifactId>htmlparser</artifactId>
				<version>${htmlparser.version}</version>
			</dependency>
			<!-- html的css解析  http://central.maven.org/maven2/com/phloc/ -->
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-commons</artifactId>
				<version>${phloc-commons.version}</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-html</artifactId>
				<version>${phloc-html.version}</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-json</artifactId>
				<version>${phloc-json.version}</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-css</artifactId>
				<version>${phloc-css.version}</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-schematron</artifactId>
				<version>2.7.1</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-poi</artifactId>
				<version>2.8.1</version>
			</dependency>
			
			<!-- ###################### Java对象、XML、JSON 解析转换工具包 ###################### -->
			
			<!--  Dom4j是一个Java的XML API，类似于jdom，用来读写XML文件的工具包。 -->
			<dependency>
				<groupId>dom4j</groupId>
				<artifactId>dom4j</artifactId>
				<version>${dom4j.version}</version>
			</dependency>
			<!--JDOM是一种使用 XML（标准通用标记语言下的一个子集） 的独特 Java 工具包，。它的设计包含 Java 语言的语法乃至语义。-->
			<dependency>
				<groupId>org.jdom</groupId>
				<artifactId>jdom</artifactId>
				<version>${jdom.version}</version>
			</dependency>
			<!-- XStream是 thoughtworks开发的开源框架，用于实现XML数据于Java对象、Json数据的转换 -->
			<dependency>
				<groupId>com.thoughtworks.xstream</groupId>
				<artifactId>xstream</artifactId>
				<version>${xstream.version}</version>
			</dependency>
			<!-- 
				Jackson可以轻松的将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象。
				相比json-lib框架，Jackson所依赖的jar包较少，简单易用并且性能也要相对高些。而且Jackson社区相对比较活跃，更新速度也比较快。
			 -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			
			<!--
				fastjson 是一个性能很好的 Java 语言实现的 JSON 解析器和生成器，来自阿里巴巴的工程师开发。 主要特点： 快速FAST
				(比其它任何基于Java的解析器和生成器更快，包括jackson） 强大（支持普通JDK类包括任意Java Bean
				Class、Collection、Map、Date或enum） 零依赖（没有依赖其它任何类库除了JDK）
			-->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>
				<version>${alibaba-fastjson.version}</version>
			</dependency>
			<!--json-lib是一个Java类库,提供将Java对象,包括beans,maps,collections,javaarrays和xml等转换成JSON,或者反向转换的功能-->
			<dependency>
				<groupId>net.sf.json-lib</groupId>
				<artifactId>json-lib</artifactId>
				<version>${jsonlib.version}</version>
				<classifier>jdk15</classifier>
			</dependency>
			<!-- Simple JSON是Google开发的Java JSON解析框架,基于Apache协议。 -->
			<dependency>
				<groupId>com.googlecode.json-simple</groupId>
				<artifactId>json-simple</artifactId>
				<version>${json-simple.version}</version>
			</dependency>
			<!--  Gson 是 Google 提供的用来在 Java 对象和 JSON 数据之间进行映射的 Java 类库。可以将一个 JSON 字符串转成一个 Java 对象,或者反过来 -->
			<dependency>
				<groupId>com.google.code.gson</groupId>
				<artifactId>gson</artifactId>
				<version>${gson.version}</version>
			</dependency>
			
			<!-- ######################PDF文档生成和解析工具包###################### -->

			<!--itext -->
			<dependency>
				<groupId>com.lowagie</groupId>
				<artifactId>itext</artifactId>
				<version>${itext.version}</version>
			</dependency>
			<dependency>
				<groupId>com.lowagie</groupId>
				<artifactId>itext-rtf</artifactId>
				<version>2.1.7</version>
			</dependency>
			<dependency>
				<groupId>com.lowagie</groupId>
				<artifactId>itext-rups</artifactId>
				<version>2.1.7</version>
			</dependency>
			<dependency>
				<groupId>com.lowagie</groupId>
				<artifactId>iTextAsian</artifactId>
				<version>1.0</version>
				<optional>true</optional>
			</dependency>

			<!--itextpdf -->
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>itextpdf</artifactId>
				<version>${itextpdf.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>itext-pdfa</artifactId>
				<version>${itextpdf.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>itext-xtra</artifactId>
				<version>${itextpdf.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>itext-asian</artifactId>
				<version>5.2.0</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>itext-hyph-xml</artifactId>
				<version>5.1.1</version>
			</dependency>
			
			<!--itext 7 -->
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>kernel</artifactId>
				<version>${itext7.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>layout</artifactId>
				<version>${itext7.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId> io</artifactId>
				<version>${itext7.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>font-asian</artifactId>
				<version>${itext7.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>forms</artifactId>
				<version>${itext7.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>barcodes</artifactId>
				<version>${itext7.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>hyph</artifactId>
				<version>${itext7.version}</version>
			</dependency>
			<dependency>
				<groupId>com.itextpdf</groupId>
				<artifactId>pdfa</artifactId>
				<version>${itext7.version}</version>
			</dependency>
			
			<!-- pdfbox -->
			<dependency>
				<groupId>org.apache.pdfbox</groupId>
				<artifactId>pdfbox</artifactId>
				<version>${pdfbox.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.pdfbox</groupId>
				<artifactId>fontbox</artifactId>
				<version>${pdfbox.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.pdfbox</groupId>
				<artifactId>jempbox</artifactId>
				<version>${pdfbox.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.pdfbox</groupId>
				<artifactId>xmpbox</artifactId>
				<version>${pdfbox.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.pdfbox</groupId>
				<artifactId>preflight</artifactId>
				<version>${pdfbox.version}</version>
			</dependency>

			<!-- ###################### html生成pdf工具  ###################### -->

			<dependency>
				<groupId>com.itextpdf.tool</groupId>
				<artifactId>xmlworker</artifactId>
				<version>${xmlworker-fix.version}</version>
			</dependency>

			<!--
				Flying Saucer 用纯 Java 编写的，可以将 XML/XHTML 应用 CSS2.1 样式渲染为 PDF、图片。
				此库基本上能实现 CSS 2.1 的整体性， 并且完全符合 W3C 规范。
			-->
			<dependency>
				<groupId>org.xhtmlrenderer</groupId>
				<artifactId>flying-saucer-core</artifactId>
				<version>${flying-saucer-fix.version}</version>
			</dependency>
			<dependency>
				<groupId>org.xhtmlrenderer</groupId>
				<artifactId>flying-saucer-pdf</artifactId>
				<version>${flying-saucer.version}</version>
			</dependency>
			<dependency>
				<groupId>org.xhtmlrenderer</groupId>
				<artifactId>flying-saucer-pdf-itext5</artifactId>
				<version>${flying-saucer-fix.version}</version>
			</dependency>
			<dependency>
				<groupId>org.xhtmlrenderer</groupId>
				<artifactId>flying-saucer-swt</artifactId>
				<version>${flying-saucer.version}</version>
			</dependency>
			
			<!-- 
				docx4j是一个开源的(Apache许可证v2)Java库，专门用来创建、编辑和保存Microsoft Open XML文档（包括Word docx, Powerpoint pptx和Excel xlsx）的Java类库。
				docx4j最初是由Plutext Pty Ltd于2008年创建。
				docx4j与微软的OpenXML SDK类似，但是是面向Java的。它使用JAXB在内存中创建Java对象。它的功能强大，对于支持的文档的格式，你可以用docx4j做出你想要的效果。它的功能有：
				
				1、 打开已存在的docx/pptx/xlsx(从文件系统, SMB/CIFS, 使用VFS从WebDAV等)
				2、创建新的docx文档
				3、用程序来处理docx文档
				4、CustomXML绑定(使用OpenDoPE插件来处理重复绑定和条件绑定)
				5、将文件保存成HTML或PDF
				6、Diff/比较文档、段落
				7、导入二进制文档(使用Apache POI的HWPF)
				8、处理Word 2007的xmlPackage(pkg)格式
				9、将docx保存成docx(压缩格式)或者JCR（未压缩格式）
				10、字体支持（字体替换，使用文档中嵌入的任何字体）
				
				但首先你需要花时间理解JAXB和Open XML文件结构。你可以使用在线的webapp来查看docx/xlsx/pptx的文件结构，或者下载到本地的应用Word AddIn来查看docx的文件结构。
				
				http://www.docx4java.org/downloads.html
			-->
			
			<!-- docx4j is a library which helps you to work with the Office Open XML file format as used in docx documents, pptx presentations, and xlsx spreadsheets. -->
			<dependency>
			    <groupId>org.docx4j</groupId>
			    <artifactId>docx4j</artifactId>
			    <version>${docx4j.version}</version>
			</dependency>
			<!-- Modified flyingsaucer XML/XHTML and CSS 2.1 renderer, to support docx (and eventually pptx) output  -->
			<dependency>
			    <groupId>org.docx4j</groupId>
			    <artifactId>xhtmlrenderer</artifactId>
			    <version>3.0.0</version>
			</dependency>
			<!-- docx4j-ImportXHTML converts XHTML to OpenXML WordML (docx) using docx4j  -->
			<dependency>
			    <groupId>org.docx4j</groupId>
			    <artifactId>docx4j-ImportXHTML</artifactId>
			    <version>3.3.1</version>
			    <exclusions>
					<exclusion>
						<artifactId>slf4j-log4j12</artifactId>
						<groupId>org.slf4j</groupId>
					</exclusion>
					<exclusion>
						<artifactId>log4j</artifactId>
						<groupId>log4j</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- jaxb.properties files specifying that docx4j should use the EclipseLink MOXy (JAXB) runtime  -->
			<dependency>
			    <groupId>org.docx4j</groupId>
			    <artifactId>docx4j-MOXy-JAXBContext</artifactId>
			    <version>${docx4j.version}</version>
			</dependency>
			<!-- Export docx to PDF via XSL FO, using Apache FOP  -->
			<dependency>
			    <groupId>org.docx4j</groupId>
			    <artifactId>docx4j-export-fo</artifactId>
			    <version>3.3.1</version>
			</dependency>
			
			<!-- ###################### 模板框架  ###################### -->
			
			<!--
				Velocity是一个基于java的模板引擎（template engine）。 它允许任何人仅仅简单的使用模板语言（template
				language）来引用由java代码定义的对象。
				当Velocity应用于web开发时，界面设计人员可以和java程序开发人员同步开发一个遵循MVC架构的web站点，
				也就是说，页面设计人员可以只关注页面的显示效果，而由java程序开发人员关注业务逻辑编码。
				Velocity将java代码从web页面中分离出来，这样为web站点的长期维护提供了便利，
				同时也为我们在JSP和PHP之外又提供了一种可选的方案。 Velocity的能力远不止web站点开发这个领域，
				例如，它可以从模板（template）产生SQL和PostScript、XML，它也可以被当作一个独立工具来产生源代码和报告，
				或者作为其他系统的集成组件使用。Velocity也可以为Turbine web开发架构提供模板服务（template service）。
				Velocity+Turbine提供一个模板服务的方式允许一个web应用以一个真正的MVC模型进行开发。
			-->
			<dependency>
				<groupId>org.apache.velocity</groupId>
				<artifactId>velocity</artifactId>
				<version>${velocity.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.velocity</groupId>
				<artifactId>velocity-tools</artifactId>
				<version>${velocity-tools.version}</version>
			</dependency>
			<!-- FreeMarker是一个用Java语言编写的模板引擎，它基于模板来生成文本输出 -->
			<dependency>
				<groupId>org.freemarker</groupId>
				<artifactId>freemarker</artifactId>
				<version>${freemarker.version}</version>
			</dependency>
			
			<!-- ###################### Spring 4.x 核心框架  ###################### -->
			
			<!-- 基于代理的AOP支持 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 基于AspectJ的切面 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aspects</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- Bean支持，包括Groovy  -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 应用程序的运行时环境，包括调度和远程处理的抽象 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 用于把常用的第三方 类库集成到Spring的应用环境中的支持类 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 被大多数其他Spring模块使用的核心工具类 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- Spring的表达式语言（SpEL） -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-expression</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 用于JVM启动引导的监测代理  -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-instrument</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 用于Tomcat的监测代理 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-instrument-tomcat</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- JDBC支持包，包括DataSource安装和JDBC访问支持 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- JMS支持包，包括发送和接收JMS消息的辅助器 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jms</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 支持消息传递的架构和协议 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-messaging</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 对象/关系映射，包括对JPA和hibernate的支持 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 对象/XML的映射 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-oxm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 支持单元测试和集成测试的Spring组件 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 事务的基础架构，包括对DAO支持和JCA集成 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- Web支持包，包括客户端和web的远程访问 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- REST的web服务和用于web应用程序的mvc实现 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			
			<!-- ###################### Struts2.x 核心框架  ###################### -->
			
			<dependency>
				<groupId>org.apache.struts</groupId>
				<artifactId>struts2-core</artifactId>
				<version>${struts2.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.struts</groupId>
				<artifactId>struts-annotations</artifactId>
				<version>${struts2-annotations.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.struts.xwork</groupId>
				<artifactId>xwork-core</artifactId>
				<version>${struts2-xwork.version}</version>
			</dependency>
 
		</dependencies>
	</dependencyManagement>

</project>
